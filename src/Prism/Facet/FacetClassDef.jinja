
{% macro constructor(facet, all_members) %}
    {% if facet.abstract %}
        {% set node_type_param = 'FacetType facetType, ' %}
        {% set node_type_arg = 'facetType' %}
        {% set trailing_params = ', auto const&... args' %}
        {% set trailing_args = ', args...' %}
    {% else %}
        {% set node_type_arg = 'FacetType::' ~ facet.name %}
    {% endif %}
    {% if all_members %}
        {% set comma_if_members = ',' %}
    {% else %}
        {% set comma_if_members = '' %}
    {% endif %}
explicit {{ facet.name }}({{ node_type_param }}
                          MonotonicBufferResource& resource
                          {{- comma_if_members }}
                          {{ all_members | map('ctor_param') | join(', ') -}}
                          {{ trailing_params }}):
         {{ facet.base }}({{ node_type_arg }}, resource {{ comma_if_members }}
                          {{ all_members | map('ctor_arg_as_stored') | join(', ') -}}
                          {{ trailing_args }})
{}
{% endmacro %}

{% macro uniform_constructor(facet, all_members) %}
    {% if facet.abstract %}
        {% set node_type_param = 'FacetType facetType, ' %}
        {% set node_type_arg = 'facetType' %}
        {% set trailing_params = ', auto const&... args' %}
        {% set trailing_args = ', args...' %}
    {% else %}
        {% set node_type_arg = 'FacetType::' ~ facet.name %}
    {% endif %}
    {% if all_members %}
        {% set comma_if_members = ',' %}
    {% else %}
        {% set comma_if_members = '' %}
    {% endif %}
explicit {{ facet.name }}({{ node_type_param }}
                          MonotonicBufferResource& resource
                          {{- comma_if_members }}
                          {{ all_members | map('uniform_ctor_param') | join(', ') -}}
                          {{ trailing_params }}):
         {{ facet.base }}({{ node_type_arg }}, resource {{ comma_if_members }}
                          {{ all_members | map('verify_uniform_ctor_arg') | join(', ') -}}
                          {{ trailing_args }})
{}
{% endmacro %}

{% macro field_accessor(member, index) %}
/// {{member.comment}}
{{ member.type|interface_type }} {{ member.name }}() const {
    return childAt<{{ member.type }}>(
        {{ index }}){{ member.type|to_interface_type }};
}
{% endmacro %}

{% macro all_field_accessors(cls, offset) %}
    {% for member in cls.members %}
        {{ field_accessor(member, loop.index0 + offset) }}
    {% endfor %}
{% endmacro %}

{% macro define_facet_class(facet, facets) %}
    {% set all_members, offset = facet | collect_all_members(facets) %}
/// {{facet.comment}}
class {{ facet.name }}: public {{ facet.base }} {
    {% if facet.abstract %}
        {% if facet.members %}
public:
        {% endif %}
    {{- all_field_accessors(facet, offset) -}}
protected:
    {{ constructor(facet, all_members) }}
    {% if all_members | contains_terminals %}
    {{ uniform_constructor(facet, all_members) }}
    {% endif %}
    using {{ facet.base }}::{{ facet.base }};
    {% else %}
public:
    {{ constructor(facet, all_members) }}
    {% if all_members | contains_terminals %}
    {{ uniform_constructor(facet, all_members) }}
    {% endif %}
    {{ all_field_accessors(facet, offset) }}
    {% endif %}
};
{% endmacro %}

// Hierarchical overview over the facet nodes
//
{{ facets | build_inheritance_tree -}}
//

namespace prism {

{% for facet in facets %}
    {% if not facet.decl_only %}
        {{ define_facet_class(facet, facets) }}
    {% endif %}
{% endfor %}

}

