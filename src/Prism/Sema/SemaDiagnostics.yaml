
diags:
  - name: UndeclaredID
    base: SemaDiagnostic
    kind: Error
    members:
      - name: similar
        type: Symbol const*
    ctor_body: UndeclaredIDNotes(*this, similar);
    header: >
      str << "Use of undeclared identifier '" << getID(facet(), sourceContext())
          << "'";

  - name: Redefinition
    base: SemaDiagnostic
    kind: Error
    members:
      - name: name
        type: std::string_view
      - name: existing
        type: Symbol const*
        ctor_only: true
    ctor_body: >
      addNote(existing->facet(), [=](std::ostream& str) {
          str << "Existing declaration is here";
      });
    header: >
      str << "Redefition of name '" << name << "'";

  - name: TypeDefCycle
    base: SemaDiagnostic
    kind: Error
    comment: 'Cyclic structure definition'
    no_source: true
    members:
      - name: cycle
        type: std::span<Symbol const* const>
        ctor_only: true
    ctor_body: TypeDefCycleNotes(*this, cycle);
    header: >
      str << "Detected a cycle in a type definition:";

  - name: BadSymRef
    base: SemaDiagnostic
    kind: Error
    members:
      - name: providedSymbol
        type: Symbol const*
      - name: expectedSymbolType
        type: SymbolType
    header: >
      str << "Expected " << prettyName(expectedSymbolType) << ", have "
          << formatName(providedSymbol);

  - name: InvalidNumOfGenArgs
    base: SemaDiagnostic
    kind: Error
    members:
      - name: genSymbol
        type: GenericSymbol const*
      - name: numArgs
        type: size_t
    header: >
      size_t numParams = genSymbol->genParams().size();
      str << "Generic " << getGenCatName(genSymbol) << " "
          << formatName(genSymbol) << " requires "
          << pluralize(numParams, "argument") << ", have "
          << numToWord(numArgs);

  - name: BadGenTypeArg
    base: SemaDiagnostic
    kind: Error
    members:
      - name: argument
        type: ValueType const*
      - name: traitBound
        type: Trait const*
    header: >
      utl::streammanip argName([&](std::ostream& str) {
          if (isa<GenericTypeParam>(argument))
              str << formatDecl(argument);
          else
              str << formatName(argument);
      });
      str << "Type argument " << argName << " does not conform to "
          << formatName(traitBound);

  - name: ThisParamBadPosition
    base: SemaDiagnostic
    kind: Error
    header: >
      str << "'this' must be the first parameter";

  - name: ThisParamFreeFunction
    base: SemaDiagnostic
    kind: Error
    header: >
      str << "'this' cannot appear in non-member functions";

  - name: AmbiguousConformance
    base: SemaDiagnostic
    kind: Error
    members:
      - name: sym
        type: Symbol const*
      - name: matches
        type: std::span<Obligation const* const>
        ctor_only: true
    ctor_body: AmbiguousConformanceNotes(*this, matches);
    header: >
      str << "Ambiguous conformance of "
          << formatDecl(sym, { .primaryQualified = true });
 
  - name: IncompleteImpl
    base: SemaDiagnostic
    kind: Error
    members:
      - name: impl
        type: Symbol const*
      - name: interface
        type: InterfaceLike const&
        ctor_only: true
    ctor_body: IncompleteImplNotes(*this, interface);
    header: >
      if (isa<TraitImpl>(impl))
          str << "Incomplete trait implementation " << formatDecl(impl);
      else
          str << "Declaration of " << formatName(impl)
              << " is missing implementations for a base trait";
     
  - name: BaseClassInTrait
    base: SemaDiagnostic
    kind: Error
    members:
      - name: trait
        type: Symbol const*
      - name: base
        type: BaseClass const*
    header: >
      str << "Trait " << formatName(trait) << " cannot inherit from struct "
          << formatName(base->type());

  - name: MemVarInTrait
    base: SemaDiagnostic
    kind: Error
    members:
      - name: trait
        type: Symbol const*
      - name: member
        type: MemberVar const*
    header: >
      str << "Trait " << formatName(trait)
          << " cannot have non-static member variables";

  - name: DuplicateTraitImpl
    base: SemaDiagnostic
    kind: Error
    members:
      - name: impl
        type: Symbol const*
      - name: existing
        type: Symbol const*
        ctor_only: true
    ctor_body: DuplicateTraitImplNotes(*this, existing);
    header: >
      str << "Duplicate trait implementation " << formatDecl(impl);
