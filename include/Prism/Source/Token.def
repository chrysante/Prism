#ifndef TOKEN_KIND
#define TOKEN_KIND(Kind)
#endif

TOKEN_KIND(Error)

// Punctuation

#ifndef PUNCTUATION_TOKEN_KIND
#define PUNCTUATION_TOKEN_KIND(Kind, Spelling) TOKEN_KIND(Kind)
#endif

PUNCTUATION_TOKEN_KIND(Comma, ",")
PUNCTUATION_TOKEN_KIND(Period, ".")
PUNCTUATION_TOKEN_KIND(Colon, ":")
PUNCTUATION_TOKEN_KIND(Semicolon, ";")
PUNCTUATION_TOKEN_KIND(OpenParen, "(")
PUNCTUATION_TOKEN_KIND(CloseParen, ")")
PUNCTUATION_TOKEN_KIND(OpenBrace, "{")
PUNCTUATION_TOKEN_KIND(CloseBrace, "}")
PUNCTUATION_TOKEN_KIND(OpenBracket, "[")
PUNCTUATION_TOKEN_KIND(CloseBracket, "]")

#undef PUNCTUATION_TOKEN_KIND

// Operators

#ifndef OPERATOR_TOKEN_KIND
#define OPERATOR_TOKEN_KIND(Kind, Spelling) TOKEN_KIND(Kind)
#endif

OPERATOR_TOKEN_KIND(Plus, "+")
OPERATOR_TOKEN_KIND(DoublePlus, "++")
OPERATOR_TOKEN_KIND(Minus, "-")
OPERATOR_TOKEN_KIND(DoubleMinus, "--")
OPERATOR_TOKEN_KIND(Star, "*")
OPERATOR_TOKEN_KIND(Slash, "/")
OPERATOR_TOKEN_KIND(Percent, "%")
OPERATOR_TOKEN_KIND(Ampersand, "&")
OPERATOR_TOKEN_KIND(DoubleAmpersand, "&&")
OPERATOR_TOKEN_KIND(VertBar, "|")
OPERATOR_TOKEN_KIND(DoubleVertBar, "||")
OPERATOR_TOKEN_KIND(Circumflex, "^")
OPERATOR_TOKEN_KIND(Tilde, "~")
OPERATOR_TOKEN_KIND(Equal, "=")
OPERATOR_TOKEN_KIND(DoubleEqual, "==")
OPERATOR_TOKEN_KIND(NotEq, "!=")
OPERATOR_TOKEN_KIND(LeftAngle, "<")
OPERATOR_TOKEN_KIND(DoubleLeftAngle, "<<")
OPERATOR_TOKEN_KIND(LeftAngleEq, "<=")
OPERATOR_TOKEN_KIND(RightAngle, ">")
OPERATOR_TOKEN_KIND(DoubleRightAngle, ">>")
OPERATOR_TOKEN_KIND(RightAngleEq, ">=")
OPERATOR_TOKEN_KIND(PlusEq, "+=")
OPERATOR_TOKEN_KIND(MinusEq, "-=")
OPERATOR_TOKEN_KIND(StarEq, "*=")
OPERATOR_TOKEN_KIND(SlashEq, "/=")
OPERATOR_TOKEN_KIND(PercentEq, "%=")
OPERATOR_TOKEN_KIND(DoubleLeftAngleEq, "<<=")
OPERATOR_TOKEN_KIND(DoubleRightAngleEq, ">>=")
OPERATOR_TOKEN_KIND(AmpersandEq, "&=")
OPERATOR_TOKEN_KIND(VertBarEq, "|=")
OPERATOR_TOKEN_KIND(CircumflexEq, "^=")
OPERATOR_TOKEN_KIND(Question, "?")
OPERATOR_TOKEN_KIND(Exclam, "!")
OPERATOR_TOKEN_KIND(QuestionColon, "?:")
OPERATOR_TOKEN_KIND(Arrow, "->")

#undef OPERATOR_TOKEN_KIND

// Keywords

#ifndef KEYWORD_TOKEN_KIND
#define KEYWORD_TOKEN_KIND(Kind, Spelling) TOKEN_KIND(Kind)
#endif

#ifndef DECLARATOR_TOKEN_KIND
#define DECLARATOR_TOKEN_KIND(Kind, Spelling) KEYWORD_TOKEN_KIND(Kind, Spelling)
#endif

DECLARATOR_TOKEN_KIND(Var, "var")
DECLARATOR_TOKEN_KIND(Let, "let")
DECLARATOR_TOKEN_KIND(Fn, "fn")
DECLARATOR_TOKEN_KIND(Struct, "struct")
DECLARATOR_TOKEN_KIND(Trait, "trait")
DECLARATOR_TOKEN_KIND(Impl, "impl")

#undef DECLARATOR_TOKEN_KIND

#ifndef CONTROL_FLOW_TOKEN_KIND
#define CONTROL_FLOW_TOKEN_KIND(Kind, Spelling)                                \
    KEYWORD_TOKEN_KIND(Kind, Spelling)
#endif

CONTROL_FLOW_TOKEN_KIND(Return, "return")
CONTROL_FLOW_TOKEN_KIND(If, "if")
CONTROL_FLOW_TOKEN_KIND(Else, "else")
CONTROL_FLOW_TOKEN_KIND(For, "for")
CONTROL_FLOW_TOKEN_KIND(Do, "do")
CONTROL_FLOW_TOKEN_KIND(While, "while")

#undef CONTROL_FLOW_TOKEN_KIND

#ifndef ID_OPERATOR_TOKEN_KIND
#define ID_OPERATOR_TOKEN_KIND(Kind, Spelling)                                 \
    KEYWORD_TOKEN_KIND(Kind, Spelling)
#endif

ID_OPERATOR_TOKEN_KIND(As, "as")
ID_OPERATOR_TOKEN_KIND(Mut, "mut")
ID_OPERATOR_TOKEN_KIND(Dyn, "dyn")
ID_OPERATOR_TOKEN_KIND(New, "new")
ID_OPERATOR_TOKEN_KIND(Move, "move")

#undef ID_OPERATOR_TOKEN_KIND

#ifndef PRIMARY_TOKEN_KIND
#define PRIMARY_TOKEN_KIND(Kind, Spelling) KEYWORD_TOKEN_KIND(Kind, Spelling)
#endif

PRIMARY_TOKEN_KIND(True, "true")
PRIMARY_TOKEN_KIND(False, "false")
PRIMARY_TOKEN_KIND(This, "this")
PRIMARY_TOKEN_KIND(Type, "type")
PRIMARY_TOKEN_KIND(Void, "void")
PRIMARY_TOKEN_KIND(Byte, "byte")
PRIMARY_TOKEN_KIND(Int, "int")
PRIMARY_TOKEN_KIND(Int8, "i8")
PRIMARY_TOKEN_KIND(Int16, "i16")
PRIMARY_TOKEN_KIND(Int32, "i32")
PRIMARY_TOKEN_KIND(Int64, "i64")
PRIMARY_TOKEN_KIND(UInt8, "u8")
PRIMARY_TOKEN_KIND(UInt16, "u16")
PRIMARY_TOKEN_KIND(UInt32, "u32")
PRIMARY_TOKEN_KIND(UInt64, "u64")
PRIMARY_TOKEN_KIND(Float32, "f32")
PRIMARY_TOKEN_KIND(Float64, "f64")

#undef PRIMARY_TOKEN_KIND

#undef KEYWORD_TOKEN_KIND

// Other tokens

#ifndef LITERAL_TOKEN_KIND
#define LITERAL_TOKEN_KIND(Kind) TOKEN_KIND(Kind)
#endif

LITERAL_TOKEN_KIND(StringLiteral)
LITERAL_TOKEN_KIND(CharLiteral)
LITERAL_TOKEN_KIND(IntLiteralBin)
LITERAL_TOKEN_KIND(IntLiteralDec)
LITERAL_TOKEN_KIND(IntLiteralHex)

#undef LITERAL_TOKEN_KIND

TOKEN_KIND(Identifier)
TOKEN_KIND(AutoArgIntro)
TOKEN_KIND(End)

#undef TOKEN_KIND
