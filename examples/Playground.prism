

fn takeCallback(f: fn (n: int) -> int) -> int {
    f(42)
}

fn test() {
    takeCallback(Foo{}); // Fine
    takeCallback(Bar{}); // Fine
    takeCallback(Baz{}); // Ill-formed
    
    takeCallback(fn 2 * $0); // Fine. `fn 2 * $0` is a closure of anonymous
    // type, that conforms to
    // std.callable(fn (auto) -> auto)
}


/*

// Exposition:
module std {

    trait convertible_to(To: type) {
        fn convert(&this) -> To;
    }

    trait callable(R: type, ...Args: type) {
        fn call(args...: Args) -> R;
    }

    impl [R: type, ...Args: type, R_orig: convertible_to(R),
          ...Args_orig: convertible_to(args)...]
          convertible_to(std.callable(R, Args...))
          for std.callable(R_orig, Args_orig...) {
        fn convert(&this) -> std.callable(R, Args...) {
            fn (...args: Args) -> R {
                from(args...)
            }
        }
    }

    impl convertible_to(i64) for i32 {
        fn convert(&this) -> i64 { builtin.i64_to_i32(this) }
    }
    
}

struct Foo {
    impl fn std.callable(fn (int) -> int).call(n: int) -> int { 2 * n }
}

struct Bar {}

impl std.callable(fn (n: int) -> int) for Bar {
    fn call(n: int) -> int { 2 * n }
}

struct Baz {}

fn takeCallback(f: fn (n: int) -> int) -> int {
    f(42)
}

fn test() {
    takeCallback(Foo{}); // Fine
    takeCallback(Bar{}); // Fine
    takeCallback(Baz{}); // Ill-formed
    
    takeCallback(fn 2 * $0); // Fine. `fn 2 * $0` is a closure of anonymous
                             // type, that conforms to
                             // std.callable(fn (auto) -> auto)
}

//
// `fn 2 * $0` is an object of the following type:
//
// struct __closure {
//     typedef [T: type] R = decltype(arg: T) { 2 * arg };
//     impl fn [T: type] std.callable(fn (T) -> R(T)).call(arg: T) -> R(T) { 2 * arg }
// }
//
// alternatively:
//
// struct __closure {
//     typedef [T: type] R = decltype(arg: T) { 2 * arg };
// }
// impl [T: type] std.callable(fn (T) -> __closure.R(T)) for __closure {
//     fn call(arg: T) -> R(T) { 2 * arg }
// }
//

/*

// Similar to std::invocable<int> auto in C++
fn takeCallbackByImplValue(cb: fn (n: int) -> int) {
    cb(21)
}

// Similar to std::invocable<int> auto& in C++
fn takeCallbackByImplRef(cb: &fn (n: int) -> int) {
    cb(21)
}

// Similar to std::function<int(int)> in C++
fn takeCallbackByDynValue(cb: dyn fn (n: int) -> int) {
    cb(21)
}

// Similar to std::function_ref<int(int)> in C++
fn takeCallbackByDynRef(cb: &dyn fn (n: int) -> int) {
    cb(21)
}

fn main() {
    takeCallbackByImplValue(fn 2 * $0); // evaluates to 42
    takeCallbackByImplValue(fn {
        let n = 2 * $0;
        n
    }); // evaluates to 42
    takeCallbackByImplValue(fn (n: int) { n }); // evaluates to 21
    
    
    takeCallbackByImplValue(fn (n: int) n);
    //                                  ^ ERROR
    // With explicit parameter declarations, closure body must be a compound
    // expression
}

fn makeCallback() -> fn (n: int) -> int {
    return fn 2 * $0;
}

fn makeBindingCallback(value: int) -> fn (n: fn(n: int) -> int) -> int {
    fn &0(value)
}


*/

*/
