


//let f = fn @0:&mut +



fn test() {
    
    
    fn @0 * @1
    
    //fn { @0 }(1);
    //@0arg;
    //@0: &;
    //@0: int;
    //@0 arg:&;
    //
}

// fn d() {
//     s = ;
//     s +
//     return y;
// }
//
// let n: int =  ;
// let n  int = 0;
// let n:     = ;
// let n:       0;
// let n =
// let n : 0 =* 0;
//
// fn test() {
//
//     x * 3
//     return 31
//
//     return fn $0
//     return fn -> int $0
//
//     0 as fn -> fn -> int;
// }

//struct X { fn test() {} }

// let x: dyn fn (n: int) -> int;

//fn test() -> T { T{}; { T{} } }

/*

struct X {
    var x: X;
}

struct Y {
    var y: Y;
}

*/




