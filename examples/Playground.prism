
let n: i32 = 0;

fn takeCallback(f: fn (n: int) -> int) -> int {
    f(42)
}

fn test() {
    takeCallback(Foo{}); // Fine
    takeCallback(Bar{}); // Fine
    takeCallback(Baz{}); // Ill-formed
    
    takeCallback(fn 2 * $0); // Fine. `fn 2 * $0` is a closure of anonymous
    // type, that conforms to
    // std.callable(auto, auto)
}

struct X: SomeBase, AnotherBase {
    fn test() -> int { return  42; }
}
