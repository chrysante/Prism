
/*

trait FooBase {
    fn foo(&this);
    fn bar(&this);
}

trait Foo1: FooBase {
    fn foo(&this) {}
    fn bar(&this) {}
}

trait Foo2: FooBase {
    fn foo(&this) {}
    fn bar(&this) {}
}

trait Foo: Foo1, Foo2 {
    fn foo(&this) {}
}

struct Base {
    fn bar(&this) {}
}

struct S: Foo {
    fn bar(&this) { return 32; }
    fn barImpl(&this) {}
}

*/

trait [To: type] ConvertibleTo {
    fn convert(&this) -> To;
}

// fn [T: ConvertibleTo(i32)] foo(arg: T) {}

//struct S {}
//
//impl ConvertibleTo(i32) for S {
//    fn convert(&this) -> i32 { return 42; }
//}

//fn test() { foo(S{}); }
