
/*

trait FooBase {
    fn foo(&this);
    fn bar(&this);
}

trait Foo1: FooBase {
    fn foo(&this) {}
    fn bar(&this) {}
}

trait Foo2: FooBase {
    fn foo(&this) {}
    fn bar(&this) {}
}

trait Foo: Foo1, Foo2 {
    fn foo(&this) {}
}

struct Base {
    fn bar(&this) {}
}

struct S: Foo {
    fn bar(&this) { return 32; }
    fn barImpl(&this) {}
}

*/

trait [To: type] ConvTo {
    fn convert(&this) -> To;
}

fn foo(arg: i32) {}

fn [To: type] foo(arg: To) {}
