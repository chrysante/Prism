

// Similar to std::invocable<int> auto in C++
fn takeCallbackByImplValue(cb: fn (n: int) -> int) {
    cb(21)
}

// Similar to std::invocable<int> auto& in C++
fn takeCallbackByImplRef(cb: &fn (n: int) -> int) {
    cb(21)
}

// Similar to std::function<int(int)> in C++
fn takeCallbackByDynValue(cb: dyn fn (n: int) -> int) {
    cb(21)
}

// Similar to std::function_ref<int(int)> in C++
fn takeCallbackByDynRef(cb: &dyn fn (n: int) -> int) {
    cb(21)
}

fn main() {
    takeCallbackByImplValue(fn 2 * $0); // evaluates to 42
    takeCallbackByImplValue(fn {
        // let n = 2 * $0;
        n
    }); // evaluates to 42
    takeCallbackByImplValue(fn (n: int) { n }); // evaluates to 21
    
    
    takeCallbackByImplValue(fn (n: int) n);
    //                                  ^ ERROR
    // With explicit parameter declarations, closure body must be a compound
    // expression
}


fn makeCallback() -> fn (n: int) -> int {
    fn 2 * $0
}

fn makeBindingCallback(value: int) -> fn (n: int) -> int {
    fn &0(value)
}
